#include <chrono>
#include <functional>
#include <memory>
#include <string>

#include <px4_msgs/msg/vehicle_command.hpp>
#include <rclcpp/rclcpp.hpp>
#include <stdint.h>

#include <chrono>
#include <iostream>

using namespace std::chrono;
using namespace std::chrono_literals;
using namespace px4_msgs::msg;

class ActivateOffboard : public rclcpp::Node {
    public:
        ActivateOffboard() : Node("offboard_control") {

            vehicle_command_publisher_ = this->create_publisher<VehicleCommand>("/fmu/in/vehicle_command", 10);

            offboard_setpoint_counter_ = 0;

            auto timer_callback = [this]() -> void {
                if (offboard_setpoint_counter_ == 10) {
                    RCLCPP_INFO(this->get_logger(), "Publishing Offboard Mode");
                    this->publish_vehicle_command(VehicleCommand::VEHICLE_CMD_DO_SET_MODE, 1, 6);
                }

                if (offboard_setpoint_counter_ < 11) {
                    offboard_setpoint_counter_++;
                }
            };


            timer_ = this->create_wall_timer(100ms, timer_callback);
        }
    
    private:
        rclcpp::TimerBase::SharedPtr timer_;
        rclcpp::Publisher<VehicleCommand>::SharedPtr vehicle_command_publisher_;

        std::atomic<uint64_t> timestamp_;   //!< common synced timestamped

        uint64_t offboard_setpoint_counter_;

        void publish_vehicle_command(uint16_t command, float param1 = 0.0, float param2 = 0.0);
};

void ActivateOffboard::publish_vehicle_command(uint16_t command, float param1, float param2)
{
	VehicleCommand msg{};
	msg.param1 = param1;
	msg.param2 = param2;
	msg.command = command;
	msg.target_system = 1;
	msg.target_component = 1;
	msg.source_system = 1;
	msg.source_component = 1;
	msg.from_external = true;
	msg.timestamp = this->get_clock()->now().nanoseconds() / 1000;
	vehicle_command_publisher_->publish(msg);
}

int main(int argc, char * argv[])
{
    std::cout << "Starting activate offboard control node..." << std::endl;
	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<ActivateOffboard>());
    rclcpp::shutdown();
    return 0;
}